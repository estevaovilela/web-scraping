filter(!is.na(link) & !is.na(autor)) %>%
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor) %>%
# caso 2
filter(is.na(resumo)) %>%
tail()
df_tibble %>%
# caso 1
filter(!is.na(link) & !is.na(autor)) %>%
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor) %>%
# caso 2
filter(is.na(resumo))
df_tibble %>%
# caso 1
filter(!is.na(link) & !is.na(autor)) %>%
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor) %>%
# caso 2
filter(is.na(resumo)) %>% VIew()
df_tibble %>%
# caso 1
filter(!is.na(link) & !is.na(autor)) %>%
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor) %>%
# caso 2
filter(is.na(resumo)) %>% View()
df_tibble %>%
# caso 1
filter(!is.na(link) & !is.na(autor)) %>%
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor) %>%
# caso 2
filter(is.na(resumo)) %>%
tail()
View(df_tibble)
# leitura do arquivo
df <- fread("trabalhos_rbep.csv", header = TRUE, encoding = "UTF-8")
View(df)
library(data.table)
library(tidyverse)
library(zoo)
View(df)
# problemas para criar "tibble"
# Error: Column `df` must be a 1d atomic vector or a list
# solução alternativa
df_tibble <- tibble("link" = df$link,
"edicao" = df$edicao,
"tipo_trabalho" = df$tipo_trabalho,
"titulo" = df$titulo,
"autor" = df$autor,
"resumo" = df$resumo)
# removendo os caracteres "\n" e "\t". o caracter "\" é um "escape caracter",
# portanto, para removê-lo precisamos das barras invertidas duplas "\\"
# a função map_df é usada para aplicar esse procedimento em todas as colunas
# mais informações: pesquisa por tutoriais do pacote purrr
df_tibble <- df_tibble %>%
purrr::map_df(.f = str_remove_all, pattern = "\\n") %>%
purrr::map_df(.f = str_remove_all, pattern = "\\t")
df_tibble[df_tibble==''] <- NA
df_tibble %>% map_dbl(~sum(is.na(.)))
df_tibble %>%
# caso 1
filter(!is.na(link) & !is.na(autor)) %>%
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor) %>%
# caso 2
filter(!is.na(resumo))
df_tibble %>%
# caso 1
filter(!is.na(link) & is.na(autor))
df_tibble %>%
# caso 1
filter(!is.na(link) & !is.na(autor))
df_tibble %>%
# caso 1
filter(!is.na(link) & !is.na(autor)) %>% View()
View(df_tibble)
df_tibble %>%
# caso 1
filter(is.na(autor)) %>% View()
View(df_tibble)
df_tibble %>%
# caso 1
filter(!is.na(autor)) %>% View()
df_tibble %>%
# caso 1View()
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor)
df_tibble %>%
# caso 1
filter(!is.na(autor)) %>%
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor)
df_tibble %>%
# caso 1
filter(!is.na(autor)) %>%
group_by(link, edicao, tipo_trabalho, titulo, resumo) %>%
nest(.key = autor) %>% View()
df_tibble %>%
# caso 1
filter(!is.na(autor)) %>% View()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
glimpse()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link))
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>% View()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link)) %>% View()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>% glimpse()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>% View()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest(.key = c(autor, resumo)) %>% View()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest(... = c(autor, resumo)) %>% View()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest(autor, resumo) %>% View()
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
chop(autor, resumo) %>% View()
?chop
?tidyr::chop
library(tidyr)
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
chop(autor, resumo)
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest() %>% View()
collapse("a", "b")
?collapse
teste <- df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest()
map_chr(teste$data, .f = unite)
map(teste$data, .f = unite)
map(teste$data[1:10], .f = t(matrix()))
map(teste$data[1:10], .f = t(matrix))
map(teste$data[1:10], .f = t(matrix(.)))
map(teste$data[1:10], .f = t(matrix(.x)))
map(teste$data[1:10], .f = ~t(matrix()))
map(teste$data[1:5], .f = unite)
?map
?apply
apply(X = teste$data[1:5], MARGIN = 1, FUN = unite)
dim(teste$data[1:5])
teste$data[1:5]
?collapse
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
select(-resumo) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = collapse(autor))
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
select(-resumo) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = unite(autor))
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
select(-resumo) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest(autor)
View(teste)
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
select(-resumo) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest(autor) -> teste_2
map(teste_2[1:5], .f = unite)
map_chr(teste_2$data[1:5], .f = unite)
map(teste_2$data[1:5], .f = unite)
map(teste_2$data[1:5], .f = spread)
map(teste_2$data[1:5], .f = spread, key = ``)
?nest
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
select(-resumo) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest(autor)
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
select(-resumo) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
nest(autor) -> teste_2
map(teste_2$data[1:5], .f = spread)
teste_2$data[1:5]
df_publicacoes <- df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
select(-autor, -resumo) %>%
distinct()
View(df_publicacoes)
rm(teste, teste_2)
df_tibble <- df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo))
View(df_tibble)
# publicações
df_publicacoes <- df_tibble %>%
select(-autor, -resumo) %>%
distinct()
# autor
df_autor <- df_tibble %>%
select(link, autor)
View(df_autor)
# resumo
df_autor <- df_tibble %>%
select(link, resumo)
# resumo
df_resumo <- df_tibble %>%
select(link, resumo)
# autor
df_autor <- df_tibble %>%
select(link, autor)
View(df_resumo)
# resumo
df_resumo <- df_tibble %>%
select(link, resumo) %>%
filter(!is.na(resumo))
View(df_resumo)
df_resumo %>% group_by(link) %>% count()
df_resumo %>% group_by(link) %>% count() %>% arrange(desc(n))
df_autor_teste <- df_autor %>%
group_by(link)
apply(df_autor_teste, 1, paste, collapse="")
apply(df_autor_teste, 2, paste, collapse="")
df_autor %>%
group_by(link) %>%
mutate(autor = apply(autor, 2, paste, collapse=""))
df_autor %>%
group_by(link) %>%
mutate(autor = apply(df_autor$autor, 2, paste, collapse=""))
df_autor %>%
group_by(link) %>%
summarise(autores = paste(autor, collapse = ", "))
df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
# agora substituindo todos os NA pela célula logo acima
# "replace na with last non na in R"
# https://ajitjohnson.com/replace-na-with-last-non-na-R/
# usando o pacote zoo e a função na.locf
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo)) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = paste(autor, collapse = ", "),
resumo = paste(resumo, collapse = "/")) %>%
View()
df_tibble <- tibble("link" = df$link,
"edicao" = df$edicao,
"tipo_trabalho" = df$tipo_trabalho,
"titulo" = df$titulo,
"autor" = df$autor,
"resumo" = df$resumo)
# removendo os caracteres "\n" e "\t". o caracter "\" é um "escape caracter",
# portanto, para removê-lo precisamos das barras invertidas duplas "\\"
# a função map_df é usada para aplicar esse procedimento em todas as colunas
# mais informações: pesquisa por tutoriais do pacote purrr
df_tibble <- df_tibble %>%
purrr::map_df(.f = str_remove_all, pattern = "\\n") %>%
purrr::map_df(.f = str_remove_all, pattern = "\\t")
df_tibble[df_tibble==''] <- NA
df_tibble %>% map_dbl(~sum(is.na(.)))
# temos dois casos:
# 1) links que não direcionam para nenhuma página, pois na sequência
# https://rebep.org.br/revista/article/view/i
# i [2, 1544) não há todos os trabalhos
df_tibble <- df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
# agora substituindo todos os NA pela célula logo acima
# "replace na with last non na in R"
# https://ajitjohnson.com/replace-na-with-last-non-na-R/
# usando o pacote zoo e a função na.locf
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo))
# publicações
df_publicacoes <- df_tibble %>%
select(-autor, -resumo) %>%
distinct()
# autor
df_autor <- df_tibble %>%
select(link, autor)
# resumo
df_resumo <- df_tibble %>%
select(link, resumo) %>%
filter(!is.na(resumo))
df_publicacoes %>%
left_join(df_autor, by = c("link"))
df_publicacoes %>%
left_join(df_autor, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = paste(autor, collapse = ", "))
df_publicacoes %>%
left_join(df_autor, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = paste(autor, collapse = ", ")) %>%
left_join(df_resumo, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(resumo = paste(resumo, collapse = "/")) %>%
View()
df_publicacoes %>%
left_join(df_autor, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = paste(autor, collapse = ", ")) %>%
left_join(df_resumo, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo, autores) %>%
summarise(resumo = paste(resumo, collapse = "/")) %>%
View()
rm(df_autor_teste)
df_completo <- df_publicacoes %>%
left_join(df_autor, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = paste(autor, collapse = ", ")) %>%
left_join(df_resumo, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo, autores) %>%
summarise(resumo = paste(resumo, collapse = "/"))
View(df_completo)
df_publicacoes_completo <- df_publicacoes %>%
left_join(df_autor, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = paste(autor, collapse = ", ")) %>%
left_join(df_resumo, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo, autores) %>%
summarise(resumo = paste(resumo, collapse = "/"))
rm(df_publicacoes)
rm(df_completo)
# publicações
df_publicacoes <- df_tibble %>%
select(-autor, -resumo) %>%
distinct()
View(df_tibble)
df <- fread("trabalhos_rbep.csv", header = TRUE, encoding = "UTF-8")
# o output não é exatamente como previsto... a ideia era
# que a coluna de "link" e "edicao" estivessem toda preenchida
# problemas para criar "tibble"
# Error: Column `df` must be a 1d atomic vector or a list
# solução alternativa
df_tibble <- tibble("link" = df$link,
"edicao" = df$edicao,
"tipo_trabalho" = df$tipo_trabalho,
"titulo" = df$titulo,
"autor" = df$autor,
"resumo" = df$resumo)
# removendo os caracteres "\n" e "\t". o caracter "\" é um "escape caracter",
# portanto, para removê-lo precisamos das barras invertidas duplas "\\"
# a função map_df é usada para aplicar esse procedimento em todas as colunas
# mais informações: pesquisa por tutoriais do pacote purrr
df_tibble <- df_tibble %>%
purrr::map_df(.f = str_remove_all, pattern = "\\n") %>%
purrr::map_df(.f = str_remove_all, pattern = "\\t")
df_tibble[df_tibble==''] <- NA
df_tibble %>% map_dbl(~sum(is.na(.)))
# temos dois casos:
# 1) links que não direcionam para nenhuma página, pois na sequência
# https://rebep.org.br/revista/article/view/i
# i [2, 1544) não há todos os trabalhos
df_tibble <- df_tibble %>%
# caso 1, esses links não tem autor pois não há publicação
filter(!is.na(autor)) %>%
# agora substituindo todos os NA pela célula logo acima
# "replace na with last non na in R"
# https://ajitjohnson.com/replace-na-with-last-non-na-R/
# usando o pacote zoo e a função na.locf
mutate(link = zoo::na.locf(link),
edicao = zoo::na.locf(edicao),
tipo_trabalho = zoo::na.locf(tipo_trabalho),
titulo = zoo::na.locf(titulo))
# publição
df_publicacao <- df_tibble %>%
select(-autor, -resumo) %>%
distinct()
# autor
df_autor <- df_tibble %>%
select(link, autor)
# resumo
df_resumo <- df_tibble %>%
select(link, resumo) %>%
filter(!is.na(resumo))
df_publicacao_completo <- df_publicacao %>%
left_join(df_autor, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo) %>%
summarise(autores = paste(autor, collapse = ", ")) %>%
left_join(df_resumo, by = c("link")) %>%
group_by(link, edicao, tipo_trabalho, titulo, autores) %>%
summarise(resumo = paste(resumo, collapse = "/"))
# Output ------------------------------------------------------------------
# autor
write_delim(x = df_autor,
path = "autor.txt",
delim = "|")
# resumo
write_delim(x = df_resumo,
path = "resumo.txt",
delim = "|")
# publicação
write_delim(x = df_publicacao,
path = "publicacao.txt",
delim = "|")
# publicação completo
write_delim(x = df_publicacao,
path = "publicacao_completo.txt",
delim = "|")
View(df_autor)
View(df_publicacao)
View(df_publicacao_completo)
View(df_resumo)
View(df_tibble)
